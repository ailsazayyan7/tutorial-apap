# Tutorial APAP

## Authors
* **ailsa.zayyan** - *1706074682* - *APAP-C
---
## Tutorial 1
### What I have learned today
#### Github
1. Apa itu Issue Tracker? Masalah apa yang dapat diselesaikan dengan Issue Tracker?
Issue tracker merupakan sebuah wadah untuk menyampaikan ide, mengumpulkan atau menyampaikan tugas, atau pun mencatat bugs yang ada di suatu fitur yang dibuat di github. Issue tracker juga bisa digunakan sebagai wadah untuk mengumpulkan user feedback dan melaporkan software bugs 
2. Apa perbedaan dari git merge dan merge --squash?
ketika kita git merge beberapa fitur yang telah di commit sebelumnya, fitur tersebut akan dimerge 1 per 1, sehingga di master akan terlihat 1 per 1 hasil commit masing-masing fitur. Sedangkan, jika kita melakukan merge --squash, beberapa fitur yang telah dicommit sebelumnya akan di merge menjadi 1 bagian yang sama
#### Spring
3. Apa itu library & dependency?
Library merupakan modul-modul yang sudah disediakan oleh Spring dan hanya perlu diimport apabila ingin digunakan. Dependency digunakan untuk mempermudah pengguna agar dapat menentukan kebutuhan dari suatu program sesuai dari dependency program tersebut
4. Apa itu Maven? Mengapa kita perlu menggunakan Maven?
Maven merupakan Java build automation tool yang utamanya digunakan untuk java project. Maven membantu kita untuk lebih mudah mengompilasi source code, melakukan testing, dan menginstall library yang dibutuhkan
5. Apa alternatif dari Maven?
Gradle, Jenkins, Vortex
### What I did not understand
(tuliskan apa saja yang kurang Anda mengerti, Anda dapat men-_check_ apabila Anda sudah mengerti
dikemudian hari, dan tambahkan tulisan yang membuat Anda mengerti)
- [ ] Kenapa saya harus belajar APAP?
- [ ] Apa itu Spring?
- [ ] Memahami message commit yang baik
- [ ] Penggunaan fitur-fitur github secara lancar
(Anda dapat membuat tampilan code dalam README.md menjadi lebih baik. Cari tahu lebih dalam
tentang penulisan README.md pada github pada link
[berikut](https://help.github.com/en/articles/basic-writing-and-formatting-syntax))




## Tutorial 2
Pertanyaan 1: Cobalah untuk menambahkan sebuah restoran dengan mengakses link berikut:
http://localhost:8080/restoran/add?idRestoran=1&nama=PanyuFC&alamat=Kantin%20Fasilkom&nomorTelepon=14022
Apa yang terjadi? Jelaskan mengapa hal tersebut dapat terjadi.
- Ketika pertama kali membuka link, link tersebut tidak dapat diakses karena saya belum membuat view add-restoran, sedangkan saya telah mengetikkan perintah "return add-restoran"

Pertanyaan 2: Cobalah untuk menambahkan sebuah restoran dengan mengakses link
berikut:
http://localhost:8080/restoran/add?idRestoran=2&nama=KentukuFC&alamat=Kantin%20FIK
Apa yang terjadi? Jelaskan mengapa hal tersebut dapat terjadi.
- Terjadi error ketika membuka link tersebut karena nomor telepon tidak didefinisikan di link. Padahal nomor telepon adalah constructor dari objek restoran.

Pertanyaan 3: Jika Papa APAP ingin melihat restoran PanyuFC, link apa yang harus diakses?
- http://localhost:8080/restoran/view?idRestoran=1

Pertanyaan 4: Tambahkan 1 contoh restoran lainnya sesukamu. Lalu cobalah untuk mengakses http://localhost:8080/restoran/viewall, apa yang akan ditampilkan? 
Sertakan juga bukti screenshotmu.
- ![bukti](src/main/resource/static/ssaddresto.jpg


LATIHAN
1. Pada RestoranController tambahkan sebuah method view Restoran dengan menggunakan
Path Variable. Misalnya, kamu ingin memasukkan data sebuah Restoran yang memiliki
idRestoran 1, untuk melihat data yang baru dimasukkan tersebut, user dapat mengakses
halaman localhost:8080/restoran/view/id-restoran/1.

Saya menambahkan code berikut dibagian RestoranController
    // URL mapping id-restoran
    @RequestMapping("/restoran/view/id-restoran/{idRestoran}")
    public String viewId(@PathVariable("idRestoran") String idRestoran, Model model){
    	// Mengambil objek RestoranModel yang dituju
        RestoranModel restoran = restoranService.getRestoranByIdRestoran(idRestoran);

        // Add model restoran ke "resto" untuk dirender
        model.addAttribute("resto", restoran);

        // Return view template
        return "view-restoran";
    }


2. Tambahkan fitur untuk melakukan update nomorTelepon Restoran berdasarkan idRestoran.
Misalnya, setelah melakukan add Restoran pada soal nomor 1 bab View Template, cobalah
untuk mengubah nomorTelepon objek Restoran tersebut menjadi 911 dengan mengakses
halaman localhost:8080/restoran/update/id-restoran/1/nomor-telepon/911.
Tampilkan juga sebuah halaman yang memberikan informasi bahwa data tersebut telah
berhasil diubah.

menambahkan fungsi update di RestoranController yang mengambil idRestoran dan nomorTelepon dari link untuk ditampilkan dan diubah nomorTeleponnya.
Kemudian buat file update-telepon.html untuk memberi informasi bahwa data telah diubah